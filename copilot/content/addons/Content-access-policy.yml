Parameters:
  App:
    Type: String
    Description: Your application's name.
  Env:
    Type: String
    Description: The environment name your service, job, or workflow is being deployed to.
  Name:
    Type: String
    Description: Your workload's name.
Resources:
  ContentDdbTableAccessPolicy:
    Metadata:
      'aws:copilot:description': 'An IAM managed policy for your service to access a DDB table in your environment'
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: !Sub
        - Grants CRUD access to the Dynamo DB table ${Table}
        - Table: { Fn::ImportValue: { Fn::Sub: "${App}-${Env}-ContentTableName" } }
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: DDBActions
            Effect: Allow
            Action:
              - dynamodb:BatchGet*
              - dynamodb:DescribeStream
              - dynamodb:DescribeTable
              - dynamodb:Get*
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:BatchWrite*
              - dynamodb:Create*
              - dynamodb:Delete*
              - dynamodb:Update*
              - dynamodb:PutItem
            Resource: 
              Fn::ImportValue: !Sub "${App}-${Env}-ContentTableArn"
          - Sid: DDBLSIActions
            Action:
              - dynamodb:Query
              - dynamodb:Scan
            Effect: Allow
            Resource: !Sub
              - ${ TableARN }/index/*
              - TableARN: { Fn::ImportValue: { Fn::Sub: "${App}-${Env}-ContentTableArn" }}

Outputs:
  ContentNameDdbTableName:
    # Injected as CONTENT_NAME_DDB_TABLE_NAME environment variable into your main container.
    Description: "The name of the DynamoDB table."
    Value: { Fn::ImportValue: { Fn::Sub: "${App}-${Env}-ContentTableName" }}
  ContentDdbTableAccessPolicy:
    Description: "The IAM managed policy to attach to the task role to give access to the DynamoDB table."
    Value: !Ref ContentDdbTableAccessPolicy

